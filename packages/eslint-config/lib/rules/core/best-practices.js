/* global module */
'use strict';

const warningComments = (() => {
    const base = [
        'fix',
        'todo',
        'fixme',
        'research',
        'xxx',
    ];

    return base.concat(base.map(item => `@${item}`));
})();

module.exports = {
    'accessor-pairs': [
        'error',
        {
            getWithoutSet: false,
            setWithoutGet: true,
        },
    ],
    'array-callback-return': 'warn',
    'block-scoped-var': 'error',
    'class-methods-use-this': 'off',
    'complexity': ['warn', {max: 20}],
    'consistent-return': ['error', {treatUndefinedAsUnspecified: false}],
    'curly': ['error', 'all'],
    'default-case': 'error',
    'default-param-last': 'error',
    'dot-location': ['error', 'property'],
    'dot-notation': 'error',
    'eqeqeq': ['error', 'always'],
    'guard-for-in': 'warn',
    'max-classes-per-file': ['error', 1],
    'no-alert': 'error',
    'no-caller': 'error',
    'no-case-declarations': 'error',
    'no-div-regex': 'error',
    'no-else-return': ['error', {allowElseIf: false}],
    'no-empty-function': ['error', {allow: ['arrowFunctions', 'constructors']}],
    'no-empty-pattern': 'error',
    'no-eq-null': 'error',
    'no-eval': ['error', {allowIndirect: false}],
    'no-extend-native': ['error', {exceptions: []}],
    'no-extra-bind': 'error',
    'no-extra-label': 'warn',
    'no-fallthrough': 'error',
    'no-floating-decimal': 'error',
    'no-global-assign': ['error', {exceptions: []}],
    'no-implicit-coercion': [
        'error',
        {
            'allow': [],
            'boolean': true,
            'number': true,
            'string': true,
        },
    ],
    'no-implicit-globals': 'error',
    'no-implied-eval': 'error',
    'no-invalid-this': 'error',
    'no-iterator': 'error',
    'no-labels': ['error', {allowLoop: true, allowSwitch: true}],
    'no-lone-blocks': 'error',
    'no-loop-func': 'error',
    'no-magic-numbers': [
        'error',
        {
            detectObjects: true,
            enforceConst: true,
            ignore: [-1, 0, 1],
            ignoreArrayIndexes: true,
        },
    ],
    'no-multi-spaces': ['error', {exceptions: {}}],
    'no-multi-str': 'error',
    'no-new': 'error',
    'no-new-func': 'error',
    'no-new-wrappers': 'error',
    'no-octal': 'error',
    'no-octal-escape': 'error',
    'no-param-reassign': ['error', {props: false}],
    'no-proto': 'error',
    'no-redeclare': ['error', {builtinGlobals: true}],
    'no-restricted-properties': [
        'error',
        {message: 'Use Object.assign instead', object: '_', property: 'extend'},
        {message: 'Call require() directly', object: 'require', property: 'cache'},
        {message: 'Call require() directly', object: 'require', property: 'main'},
        {message: 'Use Object.defineProperty instead', property: '__defineGetter__'},
    ],
    'no-return-assign': ['error', 'except-parens'],
    'no-return-await': 'error',
    'no-script-url': 'error',
    'no-self-assign': ['warn', {props: true}],
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-throw-literal': 'error',
    'no-unmodified-loop-condition': 'warn',
    'no-unused-expressions': [
        'error',
        {
            allowShortCircuit: false,
            allowTaggedTemplates: false,
            allowTernary: false,
        },
    ],
    'no-unused-labels': 'warn',
    'no-useless-call': 'error',
    'no-useless-catch': 'warn',
    'no-useless-concat': 'error',
    'no-useless-escape': 'error',
    'no-useless-return': 'warn',
    'no-void': 'off',
    'no-warning-comments': [
        'warn',
        {
            location: 'start',
            terms: warningComments,
        },
    ],
    'no-with': 'error',
    'prefer-named-capture-group': 'warn',
    'prefer-promise-reject-errors': 'error',
    'prefer-regex-literals': 'error',
    'radix': ['error', 'always'],
    'require-await': 'warn',
    'require-unicode-regexp': 'error',
    'vars-on-top': 'error',
    'wrap-iife': ['error', 'inside', {functionPrototypeMethods: true}],
    'yoda': ['error', 'never', {exceptRange: true}],
};
