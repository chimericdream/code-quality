/* global module */

const callbackNames = [
    'callback',
    'cb',
    'done',
    'next',
    'rej',
    'reject',
    'res',
    'resolve',
];

const warningComments = [
    'fix',
    'todo',
    'fixme',
    'research',
    'xxx',
].reduce((acc, key) => [...acc, `@${key}`], []);

module.exports = {
    rules: {
        'strict': ['error', 'never'],

        // Possible Errors
        'for-direction': 'error',
        'getter-return': ['error', {allowImplicit: false}],
        'no-async-promise-executor': 'error',
        'no-await-in-loop': 'error',
        'no-compare-neg-zero': 'error',
        'no-cond-assign': ['error', 'always'],
        // console.* methods are disallowed in no-restricted-syntax, which allows for custom error messages
        'no-console': 'off',
        'no-constant-condition': 'warn',
        'no-control-regex': 'error',
        'no-debugger': 'warn',
        'no-dupe-args': 'error',
        'no-dupe-else-if': 'error',
        'no-dupe-keys': 'error',
        'no-duplicate-case': 'error',
        'no-empty': 'warn',
        'no-empty-character-class': 'warn',
        'no-ex-assign': 'error',
        'no-extra-boolean-cast': 'warn',
        'no-extra-parens': [
            'error',
            'all',
            {
                enforceForArrowConditionals: false,
                ignoreJSX: 'all',
                nestedBinaryExpressions: false,
            },
        ],
        'no-extra-semi': 'error',
        'no-func-assign': 'error',
        'no-import-assign': 'error',
        'no-inner-declarations': 'warn',
        'no-invalid-regexp': 'error',
        'no-irregular-whitespace': 'error',
        'no-loss-of-precision': 'error',
        'no-misleading-character-class': 'error',
        'no-obj-calls': 'error',
        'no-promise-executor-return': 'error',
        'no-prototype-builtins': 'warn',
        'no-regex-spaces': 'warn',
        'no-setter-return': 'error',
        'no-sparse-arrays': 'warn',
        'no-template-curly-in-string': 'error',
        'no-unexpected-multiline': 'warn',
        'no-unreachable': 'error',
        'no-unreachable-loop': 'error',
        'no-unsafe-finally': 'error',
        'no-unsafe-negation': 'error',
        'no-unsafe-optional-chaining': ['error', {disallowArithmeticOperators: true}],
        'no-useless-backreference': 'error',
        'require-atomic-updates': 'error',
        'use-isnan': 'error',
        'valid-typeof': ['error', {requireStringLiterals: true}],

        // Best Practices
        'accessor-pairs': 'warn',
        'array-callback-return': ['error', {allowImplicit: true}],
        // var is prohibited anyway, so this shouldn't really affect anything
        'block-scoped-var': 'error',
        'class-methods-use-this': 'off',
        'complexity': 'warn',
        'consistent-return': 'error',
        'curly': 'error',
        'default-case': 'error',
        'default-case-last': 'warn',
        'default-param-last': 'warn',
        'dot-location': ['warn', 'property'],
        'dot-notation': 'warn',
        'eqeqeq': 'error',
        'grouped-accessor-pairs': 'error',
        'guard-for-in': 'warn',
        'max-classes-per-file': ['error', 1],
        'no-alert': 'error',
        'no-caller': 'error',
        'no-case-declarations': 'warn',
        'no-constructor-return': 'error',
        'no-div-regex': 'error',
        'no-else-return': ['error', {allowElseIf: false}],
        'no-empty-function': ['warn', {allow: ['constructors']}],
        'no-empty-pattern': 'error',
        'no-eq-null': 'error',
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-extra-bind': 'warn',
        'no-extra-label': 'warn',
        'no-fallthrough': ['error', {commentPattern: '/falls?\\s?through/i'}],
        'no-floating-decimal': 'error',
        'no-global-assign': 'error',
        'no-implicit-coercion': 'warn',
        'no-implicit-globals': 'error',
        'no-implied-eval': 'error',
        'no-invalid-this': 'error',
        'no-iterator': 'error',
        'no-labels': 'off',
        'no-lone-blocks': 'warn',
        'no-loop-func': 'error',
        'no-magic-numbers': [
            'warn',
            {
                ignore: [
                    -1,
                    0,
                    1,
                ],
            },
        ],
        'no-multi-spaces': [
            'error',
            {
                ignoreEOLComments: true,
                exceptions: {
                    ImportDeclaration: true,
                    Property: true,
                    VariableDeclarator: true,
                },
            },
        ],
        'no-multi-str': 'error',
        'no-new': 'error',
        'no-new-func': 'error',
        'no-new-wrappers': 'error',
        'no-nonoctal-decimal-escape': 'error',
        'no-octal': 'error',
        'no-octal-escape': 'error',
        'no-param-reassign': [
            'warn',
            {
                props: true,
                ignorePropertyModificationsFor: ['^draft', '[Dd]raft$'],
            },
        ],
        'no-proto': 'error',
        'no-redeclare': ['error', {builtinGlobals: true}],
        'no-restricted-properties': [
            'error',
            {
                object: 'arguments',
                property: 'callee',
                message: 'arguments.callee is deprecated',
            },
            {
                object: 'global',
                property: 'isFinite',
                message: 'Please use Number.isFinite instead',
            },
            {
                object: 'self',
                property: 'isFinite',
                message: 'Please use Number.isFinite instead',
            },
            {
                object: 'window',
                property: 'isFinite',
                message: 'Please use Number.isFinite instead',
            },
            {
                object: 'global',
                property: 'isNaN',
                message: 'Please use Number.isNaN instead',
            },
            {
                object: 'self',
                property: 'isNaN',
                message: 'Please use Number.isNaN instead',
            },
            {
                object: 'window',
                property: 'isNaN',
                message: 'Please use Number.isNaN instead',
            },
            {
                property: '__defineGetter__',
                message: 'Please use Object.defineProperty instead.',
            },
            {
                property: '__defineSetter__',
                message: 'Please use Object.defineProperty instead.',
            },
            {
                object: 'Math',
                property: 'pow',
                message: 'Use the exponentiation operator (**) instead.',
            },
        ],
        'no-return-assign': 'error',
        'no-return-await': 'warn',
        'no-script-url': 'error',
        'no-self-assign': ['error', {props: true}],
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-throw-literal': 'warn',
        'no-unmodified-loop-condition': 'warn',
        'no-unused-expressions': [
            'warn',
            {
                allowShortCircuit: true,
                allowTaggedTemplates: true,
                allowTernary: true,
            },
        ],
        'no-unused-labels': 'off',
        'no-useless-call': 'warn',
        'no-useless-catch': 'warn',
        'no-useless-concat': 'warn',
        'no-useless-escape': 'warn',
        'no-useless-return': 'warn',
        'no-void': 'error',
        'no-warning-comments': [
            'warn',
            {
                terms: warningComments,
                location: 'anywhere',
            },
        ],
        'no-with': 'error',
        'prefer-named-capture-group': 'warn',
        'prefer-promise-reject-errors': ['warn', {allowEmptyReject: true}],
        'prefer-regex-literals': ['warn', {disallowRedundantWrapping: true}],
        'radix': ['warn', 'always'],
        'require-await': 'warn',
        'require-unicode-regexp': 'warn',
        'vars-on-top': 'error',
        'wrap-iife': [
            'warn',
            'inside',
            {functionPrototypeMethods: true},
        ],
        'yoda': 'off',

        // Variables
        'init-declarations': 'off',
        'no-delete-var': 'error',
        'no-label-var': 'error',
        'no-restricted-globals': 'off',
        'no-shadow': [
            'error',
            {
                builtinGlobals: false,
                hoist: 'functions',
                allow: [
                    ...callbackNames,
                    'el',
                    'err',
                    'error',
                ],
            },
        ],
        'no-shadow-restricted-names': 'error',
        'no-undef': 'error',
        'no-undef-init': 'error',
        'no-undefined': 'off',
        'no-unused-vars': [
            'warn',
            {
                args: 'after-used',
                caughtErrors: 'all',
                ignoreRestSiblings: true,
                varsIgnorePattern: 'unused',
            },
        ],
        'no-use-before-define': 'error',

        // Stylistic Issues
        'array-bracket-newline': [
            'warn',
            {
                minItems: 3,
                multiline: true,
            },
        ],
        'array-bracket-spacing': ['warn', 'never'],
        'array-element-newline': [
            'warn',
            {
                minItems: 3,
                multiline: true,
            },
        ],
        'block-spacing': ['warn', 'never'],
        'brace-style': [
            'warn',
            'stroustrup',
            {allowSingleLine: true},
        ],
        'camelcase': ['warn', {properties: 'always'}],
        'capitalized-comments': 'off',
        'comma-dangle': [
            'warn',
            {
                arrays: 'always-multiline',
                objects: 'always-multiline',
                imports: 'always-multiline',
                exports: 'always-multiline',
                functions: 'ignore',
            },
        ],
        'comma-spacing': ['error', {before: false, after: true}],
        'comma-style': ['warn', 'last'],
        'computed-property-spacing': ['warn', 'never'],
        'consistent-this': 'off',
        'eol-last': ['warn', 'always'],
        'func-call-spacing': ['warn', 'never'],
        'func-name-matching': 'warn',
        'func-names': ['warn', 'never'],
        'func-style': [
            'error',
            'declaration',
            {allowArrowFunctions: true},
        ],
        'function-call-argument-newline': ['error', 'consistent'],
        'function-paren-newline': ['error', 'multiline'],
        'id-denylist': 'off',
        'id-length': [
            'warn',
            {
                exceptions: [
                    'cb',
                    'e',
                    'el',
                    'fn',
                    'i',
                    'j',
                    'id',
                    'qs',
                    'x',
                    'y',
                    'z',
                ],
                min: 3,
            },
        ],
        'id-match': [
            'warn',
            '^(\\$|_)?([a-zA-Z][a-z0-9]*(?:[A-Z][a-z0-9]*)*|[A-Z]+(?:_[A-Z]+)*)$',
            {
                onlyDeclarations: true,
                properties: false,
            },
        ],
        'implicit-arrow-linebreak': ['warn', 'beside'],
        'indent': [
            'error',
            4,
            {
                ArrayExpression: 1,
                CallExpression: {arguments: 'first'},
                flatTernaryExpressions: false,
                FunctionExpression: {
                    body: 1,
                    parameters: 'first',
                },
                ImportDeclaration: 1,
                MemberExpression: 1,
                ObjectExpression: 1,
                outerIIFEBody: 1,
                SwitchCase: 1,
            },
        ],
        'jsx-quotes': ['error', 'prefer-double'],
        'key-spacing': [
            'warn',
            {
                afterColon: true,
                beforeColon: false,
                mode: 'minimum',
            },
        ],
        'keyword-spacing': [
            'error',
            {
                after: true,
                before: true,
            },
        ],
        'line-comment-position': ['warn', {position: 'above'}],
        'linebreak-style': ['error', 'unix'],
        'lines-around-comment': [
            'warn',
            {
                beforeBlockComment: true,
                afterBlockComment: false,
                beforeLineComment: true,
                afterLineComment: false,
                allowBlockStart: true,
                allowBlockEnd: true,
                allowObjectStart: true,
                allowObjectEnd: true,
                allowArrayStart: true,
                allowArrayEnd: true,
                allowClassStart: true,
                allowClassEnd: true,
                ignorePattern: `(${warningComments.join('|')}|${warningComments.join('|').toUpperCase()}|noinspection)`,
            },
        ],
        'lines-between-class-members': ['warn', 'always'],
        'max-depth': ['error', 4],
        'max-len': [
            'warn',
            {
                code: 120,
                ignorePattern: `(import\\s+.+from\\s+|(?:const|var)\\s+.+=\\s*require\\([^)]+\\)|(?:\\/\\/|\\/\\*)\\s*eslint-|(?:\\/\\/|\\/\\*)\\s*(?:${warningComments.join('|')}|${warningComments.join('|').toUpperCase()}))`,
                ignoreRegExpLiterals: true,
                ignoreStrings: true,
                ignoreTemplateLiterals: true,
                ignoreTrailingComments: true,
                ignoreUrls: true,
            },
        ],
        'max-lines': 'off',
        'max-lines-per-function': 'off',
        'max-nested-callbacks': ['warn', 4],
        'max-params': ['warn', 4],
        'max-statements': 'off',
        'max-statements-per-line': ['warn', {max: 1}],
        'multiline-comment-style': ['warn', 'starred-block'],
        'multiline-ternary': ['warn', 'always-multiline'],
        'new-cap': 'error',
        'new-parens': 'error',
        'newline-per-chained-call': ['warn', {ignoreChainWithDepth: 2}],
        'no-array-constructor': 'error',
        'no-bitwise': 'error',
        'no-continue': 'warn',
        'no-inline-comments': ['warn', {ignorePattern: 'webpackChunkName:\\s.+'}],
        'no-lonely-if': 'warn',
        'no-mixed-operators': ['error', {allowSamePrecedence: true}],
        'no-mixed-spaces-and-tabs': 'error',
        'no-multi-assign': 'error',
        'no-multiple-empty-lines': [
            'warn',
            {
                max: 1,
                maxBOF: 0,
                maxEOF: 1,
            },
        ],
        'no-negated-condition': 'error',
        'no-nested-ternary': 'error',
        'no-new-object': 'error',
        'no-plusplus': ['warn', {allowForLoopAfterthoughts: true}],
        'no-restricted-syntax': [
            'error',
            {
                selector: "CallExpression[callee.object.name='console'][callee.property.name=/^(log|dir|warn|error|info|trace)$/]",
                message: 'console.* methods are not allowed',
            },
        ],
        'no-tabs': 'error',
        'no-ternary': 'off',
        'no-trailing-spaces': 'error',
        'no-underscore-dangle': 'off',
        'no-unneeded-ternary': 'error',
        'no-whitespace-before-property': 'warn',
        'nonblock-statement-body-position': ['warn', 'beside'],
        'object-curly-newline': [
            'warn',
            {
                minProperties: 4,
                multiline: true,
                consistent: true,
            },
        ],
        'object-curly-spacing': ['warn', 'never'],
        'object-property-newline': ['warn', {allowAllPropertiesOnSameLine: true}],
        'one-var': [
            'warn',
            {
                'const': 'never',
                'let': 'consecutive',
                'separateRequires': true,
                'var': 'consecutive',
            },
        ],
        'one-var-declaration-per-line': ['warn', 'always'],
        'operator-assignment': ['warn', 'always'],
        'operator-linebreak': [
            'warn',
            'before',
            {
                overrides: {
                    '+': 'before',
                    '-': 'before',
                    '?': 'before',
                    ':': 'before',
                },
            },
        ],
        'padded-blocks': ['warn', 'never'],
        'padding-line-between-statements': 'off',
        'prefer-exponentiation-operator': 'warn',
        'prefer-object-spread': 'warn',
        'quote-props': [
            'warn',
            'consistent-as-needed',
            {keywords: true},
        ],
        'quotes': [
            'warn',
            'single',
            {
                allowTemplateLiterals: true,
                avoidEscape: true,
            },
        ],
        'semi': ['error', 'always'],
        'semi-spacing': ['warn', {before: false, after: true}],
        'semi-style': ['error', 'last'],
        'sort-keys': 'off',
        'sort-vars': 'off',
        'space-before-blocks': ['warn', 'always'],
        'space-before-function-paren': [
            'warn',
            {
                anonymous: 'never',
                asyncArrow: 'always',
                named: 'never',
            },
        ],
        'space-in-parens': ['warn', 'never'],
        'space-infix-ops': 'warn',
        'space-unary-ops': [
            'warn',
            {
                words: true,
                nonwords: false,
            },
        ],
        'spaced-comment': [
            'warn',
            'always',
            {
                block: {
                    balanced: true,
                    exceptions: ['*'],
                    markers: ['!'],
                },
                line: {
                    exceptions: ['-'],
                    markers: ['/'],
                },
            },
        ],
        'switch-colon-spacing': [
            'warn',
            {
                after: true,
                before: false,
            },
        ],
        'template-tag-spacing': ['warn', 'never'],
        'unicode-bom': ['error', 'never'],
        'wrap-regex': 'warn',

        // ES6
        'arrow-body-style': [
            'warn',
            'as-needed',
        ],
        'arrow-parens': ['warn', 'as-needed'],
        'arrow-spacing': [
            'warn',
            {
                after: true,
                before: true,
            },
        ],
        'constructor-super': 'error',
        'generator-star-spacing': [
            'warn',
            {
                after: false,
                before: true,
                anonymous: {before: false, after: true},
            },
        ],
        'no-class-assign': 'error',
        'no-confusing-arrow': ['error', {allowParens: true}],
        'no-const-assign': 'error',
        'no-dupe-class-members': 'error',
        'no-duplicate-imports': ['error', {includeExports: true}],
        'no-new-symbol': 'error',
        'no-restricted-exports': ['error', {restrictedNamedExports: ['default']}],
        'no-restricted-imports': 'off',
        'no-this-before-super': 'error',
        'no-useless-computed-key': 'warn',
        'no-useless-constructor': 'warn',
        'no-useless-rename': 'warn',
        'no-var': 'error',
        'object-shorthand': ['warn', 'consistent-as-needed'],
        'prefer-arrow-callback': ['warn', {allowUnboundThis: false}],
        'prefer-const': [
            'error',
            {
                destructuring: 'any',
                ignoreReadBeforeAssign: true,
            },
        ],
        /**
         * @TODO: turn this back on if/when eslint updates to support the following examples without errors
         *
         * const {foo, bar} = thing.subThing;
         * const {prop1, prop2} = this.props;
         *
         * Desired rule:
         * 'prefer-destructuring': [
         *     'warn',
         *     {
         *         array: true,
         *         object: true,
         *     },
         *     {enforceForRenamedProperties: true},
         * ],
         */
        'prefer-destructuring': 'off',
        'prefer-numeric-literals': 'warn',
        'prefer-rest-params': 'warn',
        'prefer-spread': 'warn',
        'prefer-template': 'warn',
        'require-yield': 'error',
        'rest-spread-spacing': ['warn', 'never'],
        'sort-imports': 'off',
        'symbol-description': 'warn',
        'template-curly-spacing': ['warn', 'never'],
        'yield-star-spacing': [
            'warn',
            {
                after: true,
                before: false,
            },
        ],
    },
};
